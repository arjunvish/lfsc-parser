(check
 ;; Declarations
(% U sort
(% c (term U)
(% a (term U)
(% d (term U)
(% f (term (arrow U U))
(% b (term U)
(% e (term U)
(% A4 (th_holds true)
(% A0 (th_holds (or (ifte (= U (apply _ _ f a) d) (not (= U d (apply _ _ f b))) (= U a c)) (or (ifte (not (= U (apply _ _ f a) d)) (= U d e) (not (= U d (apply _ _ f b)))) (or (not (ifte (not (= U (apply _ _ f a) d)) (= U d e) (= U d (apply _ _ f b)))) (or (not (ifte (= U (apply _ _ f a) d) (= U d (apply _ _ f b)) (= U a c))) (or (ifte (not (= U (apply _ _ f a) e)) (= U e (apply _ _ f b)) (= U a c)) (or (ifte (= U (apply _ _ f a) e) (= U e e) (= U e (apply _ _ f b))) (or (not (ifte (= U (apply _ _ f a) e) (= U e e) (not (= U e (apply _ _ f b))))) (or (not (ifte (not (= U (apply _ _ f a) e)) (not (= U e (apply _ _ f b))) (= U a c))) (= U a b) )))))))))
(% A2 (th_holds (and (not (= U (apply _ _ f a) e)) (not (= U e (apply _ _ f b)))))
(% A1 (th_holds (and (= U (apply _ _ f a) d) (= U d (apply _ _ f b))))
(% A3 (th_holds (not (= U a b)))
(: (holds cln)

 ;; Printing deferred declarations 


 ;; Printing the global let map ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (and (= U d (apply _ _ f a)) (= U d (apply _ _ f b)))) (\ .PA315
(th_let_pf _ (trust_f (or (ifte (= U d (apply _ _ f a)) (not (= U d (apply _ _ f b))) (= U a c)) (or (ifte (not (= U d (apply _ _ f a))) (= U d e) (not (= U d (apply _ _ f b)))) (or (not (ifte (not (= U d (apply _ _ f a))) (= U d e) (= U d (apply _ _ f b)))) (or (not (ifte (= U d (apply _ _ f a)) (= U d (apply _ _ f b)) (= U a c))) (or (ifte (not (= U e (apply _ _ f a))) (= U e (apply _ _ f b)) (= U a c)) (or (ifte (= U e (apply _ _ f a)) true (= U e (apply _ _ f b))) (or (not (ifte (= U e (apply _ _ f a)) true (not (= U e (apply _ _ f b))))) (or (not (ifte (not (= U e (apply _ _ f a))) (not (= U e (apply _ _ f b))) (= U a c))) (= U a b) ))))))))) (\ .PA314
(th_let_pf _ (trust_f true) (\ .PA235
(th_let_pf _ (trust_f (and (not (= U e (apply _ _ f a))) (not (= U e (apply _ _ f b))))) (\ .PA316
(th_let_pf _ (trust_f (not (= U a b))) (\ .PA297

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom true (\ .v0 (\ .a0
(decl_atom (= U d (apply _ _ f b)) (\ .v3 (\ .a3
(decl_atom (= U e (apply _ _ f b)) (\ .v11 (\ .a11
(decl_atom (= U a b) (\ .v16 (\ .a16
(decl_atom (= U d (apply _ _ f a)) (\ .v2 (\ .a2
(decl_atom (ifte (= U d (apply _ _ f a)) (not (= U d (apply _ _ f b))) (= U a c)) (\ .v5 (\ .a5
(decl_atom (ifte (not (= U d (apply _ _ f a))) (= U d e) (not (= U d (apply _ _ f b)))) (\ .v7 (\ .a7
(decl_atom (ifte (not (= U d (apply _ _ f a))) (= U d e) (= U d (apply _ _ f b))) (\ .v8 (\ .a8
(decl_atom (ifte (= U d (apply _ _ f a)) (= U d (apply _ _ f b)) (= U a c)) (\ .v9 (\ .a9
(decl_atom (= U e (apply _ _ f a)) (\ .v10 (\ .a10
(decl_atom (ifte (not (= U e (apply _ _ f a))) (= U e (apply _ _ f b)) (= U a c)) (\ .v12 (\ .a12
(decl_atom (ifte (= U e (apply _ _ f a)) true (= U e (apply _ _ f b))) (\ .v13 (\ .a13
(decl_atom (ifte (= U e (apply _ _ f a)) true (not (= U e (apply _ _ f b)))) (\ .v14 (\ .a14
(decl_atom (ifte (not (= U e (apply _ _ f a))) (not (= U e (apply _ _ f b))) (= U a c)) (\ .v15 (\ .a15
(satlem _ _ (asf _ _ _ .a15 (\ .l30 (asf _ _ _ .a11 (\ .l22 (asf _ _ _ .a10 (\ .l20 (clausify_false (contra _ .l22 (or_elim_1 _ _ (not_not_intro _ .l20) (not_ite_elim_1 _ _ _ .l30)))))))))) (\ .pb46
(satlem _ _ (asf _ _ _ .a0 (\ .l0 (clausify_false (contra _ .PA235 .l0)))) (\ .pb0
(satlem _ _ (asf _ _ _ .a14 (\ .l28 (asf _ _ _ .a11 (\ .l22 (ast _ _ _ .a0 (\ .l1 (clausify_false (contra _ .l22 (or_elim_1 _ _ (not_not_intro _ .l1) (not_ite_elim_3 _ _ _ .l28)))))))))) (\ .pb39
(satlem _ _ (ast _ _ _ .a7 (\ .l15 (ast _ _ _ .a3 (\ .l7 (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l7 (or_elim_1 _ _ (not_not_intro _ .l5) (ite_elim_2 _ _ _ .l15)))))))))) (\ .pb12
(satlem _ _ (ast _ _ _ .a12 (\ .l25 (asf _ _ _ .a11 (\ .l22 (asf _ _ _ .a10 (\ .l20 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ .l20) (ite_elim_1 _ _ _ .l25)) .l22)))))))) (\ .pb29
(satlem _ _ (ast _ _ _ .a11 (\ .l23 (clausify_false (contra _ .l23 (and_elim_2 _ _ .PA316))))) (\ .pb52
(satlem _ _ (ast _ _ _ .a13 (\ .l27 (asf _ _ _ .a11 (\ .l22 (asf _ _ _ .a10 (\ .l20 (clausify_false (contra _ (or_elim_1 _ _ .l20 (ite_elim_2 _ _ _ .l27)) .l22)))))))) (\ .pb34
(satlem _ _ (asf _ _ _ .a16 (\ .l32 (asf _ _ _ .a13 (\ .l26 (ast _ _ _ .a8 (\ .l17 (ast _ _ _ .a9 (\ .l19 (asf _ _ _ .a5 (\ .l10 (asf _ _ _ .a7 (\ .l14 (ast _ _ _ .a14 (\ .l29 (ast _ _ _ .a15 (\ .l31 (asf _ _ _ .a12 (\ .l24 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ .l31) (or_elim_1 _ _ (not_not_intro _ .l29) (or_elim_1 _ _ .l26 (or_elim_1 _ _ .l24 (or_elim_1 _ _ (not_not_intro _ .l19) (or_elim_1 _ _ (not_not_intro _ .l17) (or_elim_1 _ _ .l14 (or_elim_1 _ _ .l10 .PA314)))))))) .l32)))))))))))))))))))) (\ .pb48
(satlem _ _ (ast _ _ _ .a16 (\ .l33 (clausify_false (contra _ .l33 .PA297)))) (\ .pb53
(satlem _ _ (asf _ _ _ .a8 (\ .l16 (ast _ _ _ .a3 (\ .l7 (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l7 (or_elim_1 _ _ (not_not_intro _ .l5) (not_ite_elim_2 _ _ _ .l16)))))))))) (\ .pb21
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ (and_elim_2 _ _ .PA315) .l6)))) (\ .pb50
(satlem _ _ (asf _ _ _ .a9 (\ .l18 (ast _ _ _ .a3 (\ .l7 (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l7 (or_elim_1 _ _ (not_not_intro _ .l5) (not_ite_elim_1 _ _ _ .l18)))))))))) (\ .pb26
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (and_elim_1 _ _ .PA315) .l4)))) (\ .pb49
(satlem _ _ (ast _ _ _ .a10 (\ .l21 (clausify_false (contra _ .l21 (and_elim_1 _ _ .PA316))))) (\ .pb51
(satlem _ _ (ast _ _ _ .a5 (\ .l11 (ast _ _ _ .a3 (\ .l7 (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l7 (or_elim_1 _ _ (not_not_intro _ .l5) (ite_elim_1 _ _ _ .l11)))))))))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

;; Printing final unsat proof 
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb34 .pb52 .v11) .pb51 .v10) (\ .cl54
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .pb21 .pb50 .v3) .pb49 .v2) (\ .cl55
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .pb26 .pb50 .v3) .pb49 .v2) (\ .cl56
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .pb5 .pb50 .v3) .pb49 .v2) (\ .cl57
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .pb12 .pb50 .v3) .pb49 .v2) (\ .cl58
(satlem_simplify _ _ _ (Q _ _ (R _ _ .pb39 .pb52 .v11) .pb0 .v0) (\ .cl59
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb46 .pb52 .v11) .pb51 .v10) (\ .cl60
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb29 .pb52 .v11) .pb51 .v10) (\ .cl61
(satlem_simplify _ _ _ (R _ _ (Q _ _ (Q _ _ (R _ _ (R _ _ (Q _ _ (Q _ _ (R _ _ .pb48 .cl54 .v13) .cl55 .v8) .cl56 .v9) .cl57 .v5) .cl58 .v7) .cl59 .v14) .cl60 .v15) .cl61 .v12) (\ .cl62
(satlem_simplify _ _ _ (Q _ _ .pb53 .cl62 .v16) (\ empty empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;;
