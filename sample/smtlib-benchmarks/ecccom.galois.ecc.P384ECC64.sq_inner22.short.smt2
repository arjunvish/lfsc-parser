(set-info :smt-lib-version 2.6)
(set-logic QF_AUFBV)
(set-info :source |These benchmarks are derived from a semi-automated proof of functional equivalence between two implementations of an Elliptic Curve Digital Signature Algorithm (ECDSA). More information about problem they encode can be found here: http://cps-vo.org/node/3405|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x31 () (_ BitVec 1))
(declare-fun x30 () (Array (_ BitVec 5) (_ BitVec 32)))
(declare-fun x29 () (_ BitVec 768))
(declare-fun x28 () (_ BitVec 832))
(declare-fun x27 ((_ BitVec 768) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64)) (_ BitVec 832))
(declare-fun x26 () (_ BitVec 768))
(declare-fun x25 () (Array (_ BitVec 5) (_ BitVec 32)))
(declare-fun x24 () (_ BitVec 32))
(declare-fun x23 () (_ BitVec 64))
(declare-fun x22 () (_ BitVec 64))
(declare-fun x21 () (_ BitVec 64))
(declare-fun x20 () (_ BitVec 64))
(declare-fun x19 () (_ BitVec 64))
(declare-fun x18 () (_ BitVec 32))
(declare-fun x17 () (_ BitVec 64))
(declare-fun x16 () (_ BitVec 64))
(declare-fun x15 () (_ BitVec 64))
(declare-fun x14 () (_ BitVec 64))
(declare-fun x13 () (_ BitVec 64))
(declare-fun x11 () (_ BitVec 1))
(declare-fun x10 () (_ BitVec 1))
(declare-fun x8 () (_ BitVec 1))
(declare-fun x6 () (_ BitVec 1))
(declare-fun x5 () (_ BitVec 1))
(declare-fun x4 () (_ BitVec 1))
(declare-fun x3 () (Array (_ BitVec 5) (_ BitVec 32)))
(declare-fun x2 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun x0 () (_ BitVec 64))
(declare-fun p12 () Bool)
(declare-fun p9 () Bool)
(declare-fun p7 () Bool)
(assert (= x31 (ite (= x25 x30) (_ bv1 1) (_ bv0 1))))
(assert (= (select x30 (_ bv23 5)) ((_ extract 767 736) x29)))
(assert (= (select x30 (_ bv22 5)) ((_ extract 735 704) x29)))
(assert (= (select x30 (_ bv21 5)) ((_ extract 703 672) x29)))
(assert (= (select x30 (_ bv20 5)) ((_ extract 671 640) x29)))
(assert (= (select x30 (_ bv19 5)) ((_ extract 639 608) x29)))
(assert (= (select x30 (_ bv18 5)) ((_ extract 607 576) x29)))
(assert (= (select x30 (_ bv17 5)) ((_ extract 575 544) x29)))
(assert (= (select x30 (_ bv16 5)) ((_ extract 543 512) x29)))
(assert (= (select x30 (_ bv15 5)) ((_ extract 511 480) x29)))
(assert (= (select x30 (_ bv14 5)) ((_ extract 479 448) x29)))
(assert (= (select x30 (_ bv13 5)) ((_ extract 447 416) x29)))
(assert (= (select x30 (_ bv12 5)) ((_ extract 415 384) x29)))
(assert (= (select x30 (_ bv11 5)) ((_ extract 383 352) x29)))
(assert (= (select x30 (_ bv10 5)) ((_ extract 351 320) x29)))
(assert (= (select x30 (_ bv9 5)) ((_ extract 319 288) x29)))
(assert (= (select x30 (_ bv8 5)) ((_ extract 287 256) x29)))
(assert (= (select x30 (_ bv7 5)) ((_ extract 255 224) x29)))
(assert (= (select x30 (_ bv6 5)) ((_ extract 223 192) x29)))
(assert (= (select x30 (_ bv5 5)) ((_ extract 191 160) x29)))
(assert (= (select x30 (_ bv4 5)) ((_ extract 159 128) x29)))
(assert (= (select x30 (_ bv3 5)) ((_ extract 127 96) x29)))
(assert (= (select x30 (_ bv2 5)) ((_ extract 95 64) x29)))
(assert (= (select x30 (_ bv1 5)) ((_ extract 63 32) x29)))
(assert (= (select x30 (_ bv0 5)) ((_ extract 31 0) x29)))
(assert (= (select x30 (_ bv31 5)) (_ bv0 32)))
(assert (= (select x30 (_ bv30 5)) (_ bv0 32)))
(assert (= (select x30 (_ bv29 5)) (_ bv0 32)))
(assert (= (select x30 (_ bv28 5)) (_ bv0 32)))
(assert (= (select x30 (_ bv27 5)) (_ bv0 32)))
(assert (= (select x30 (_ bv26 5)) (_ bv0 32)))
(assert (= (select x30 (_ bv25 5)) (_ bv0 32)))
(assert (= (select x30 (_ bv24 5)) (_ bv0 32)))
(assert (= x29 ((_ extract 767 0) x28)))
(assert (= x28 (x27 x26 x2 x1 x0)))
(assert (= x26 (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (select x3 (_ bv23 5)) (select x3 (_ bv22 5))) (select x3 (_ bv21 5))) (select x3 (_ bv20 5))) (select x3 (_ bv19 5))) (select x3 (_ bv18 5))) (select x3 (_ bv17 5))) (select x3 (_ bv16 5))) (select x3 (_ bv15 5))) (select x3 (_ bv14 5))) (select x3 (_ bv13 5))) (select x3 (_ bv12 5))) (select x3 (_ bv11 5))) (select x3 (_ bv10 5))) (select x3 (_ bv9 5))) (select x3 (_ bv8 5))) (select x3 (_ bv7 5))) (select x3 (_ bv6 5))) (select x3 (_ bv5 5))) (select x3 (_ bv4 5))) (select x3 (_ bv3 5))) (select x3 (_ bv2 5))) (select x3 (_ bv1 5))) (select x3 (_ bv0 5)))))
(assert (= x25 (store x3 ((_ extract 4 0) x2) x24)))
(assert (= (select x25 (_ bv31 5)) (_ bv0 32)))
(assert (= (select x25 (_ bv30 5)) (_ bv0 32)))
(assert (= (select x25 (_ bv29 5)) (_ bv0 32)))
(assert (= (select x25 (_ bv28 5)) (_ bv0 32)))
(assert (= (select x25 (_ bv27 5)) (_ bv0 32)))
(assert (= (select x25 (_ bv26 5)) (_ bv0 32)))
(assert (= (select x25 (_ bv25 5)) (_ bv0 32)))
(assert (= (select x25 (_ bv24 5)) (_ bv0 32)))
(assert (= x24 ((_ extract 31 0) x23)))
(assert (= x23 (bvadd x0 x22)))
(assert (= x22 (bvadd x17 x21)))
(assert (= x21 (bvshl x20 ((_ zero_extend 58) (_ bv1 6)))))
(assert (= x20 (bvand x19 (_ bv4294967295 64))))
(assert (= x19 ((_ sign_extend 32) x18)))
(assert (= x18 (select x3 ((_ extract 4 0) x2))))
(assert (= x17 (bvand x16 (_ bv4294967295 64))))
(assert (= x16 (bvmul x14 x15)))
(assert (= x15 (bvand x13 (_ bv4294967295 64))))
(assert (= x14 (bvand x13 (_ bv4294967295 64))))
(assert (= x13 ((_ sign_extend 32) x1)))
(assert (= p12 (and p9 (bvsle x2 (_ bv23 32)))))
(assert (= x11 (bvand x8 x10)))
(assert (= x10 (ite (bvsle x2 (_ bv23 32)) (_ bv1 1) (_ bv0 1))))
(assert (= p9 (and (bvsle (_ bv0 32) x2) p7)))
(assert (= x8 (bvand x4 x6)))
(assert (= p7 (not (bvsle (_ bv24 32) x2))))
(assert (= x6 (bvnot x5)))
(assert (= x5 (ite (bvsle (_ bv24 32) x2) (_ bv1 1) (_ bv0 1))))
(assert (= x4 (ite (bvsle (_ bv0 32) x2) (_ bv1 1) (_ bv0 1))))
(assert true)
(assert (= (select x3 (_ bv31 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv30 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv29 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv28 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv27 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv26 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv25 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv24 5)) (_ bv0 32)))
(assert (not (=> p12 (= x25 x30))))
(check-sat)
(exit)
