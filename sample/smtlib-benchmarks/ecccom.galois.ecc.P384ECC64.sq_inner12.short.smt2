(set-info :smt-lib-version 2.6)
(set-logic QF_AUFBV)
(set-info :source |These benchmarks are derived from a semi-automated proof of functional equivalence between two implementations of an Elliptic Curve Digital Signature Algorithm (ECDSA). More information about problem they encode can be found here: http://cps-vo.org/node/3405|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x24 () (_ BitVec 1))
(declare-fun x23 () (Array (_ BitVec 5) (_ BitVec 32)))
(declare-fun x22 () (_ BitVec 768))
(declare-fun x21 () (_ BitVec 832))
(declare-fun x20 ((_ BitVec 768) (_ BitVec 32) (_ BitVec 64)) (_ BitVec 832))
(declare-fun x19 () (_ BitVec 768))
(declare-fun x18 () (Array (_ BitVec 5) (_ BitVec 32)))
(declare-fun x17 () (_ BitVec 32))
(declare-fun x16 () (_ BitVec 64))
(declare-fun x15 () (_ BitVec 64))
(declare-fun x14 () (_ BitVec 64))
(declare-fun x13 () (_ BitVec 64))
(declare-fun x12 () (_ BitVec 32))
(declare-fun x10 () (_ BitVec 1))
(declare-fun x9 () (_ BitVec 1))
(declare-fun x7 () (_ BitVec 1))
(declare-fun x5 () (_ BitVec 1))
(declare-fun x4 () (_ BitVec 1))
(declare-fun x3 () (_ BitVec 1))
(declare-fun x2 () (Array (_ BitVec 5) (_ BitVec 32)))
(declare-fun x1 () (_ BitVec 32))
(declare-fun x0 () (_ BitVec 64))
(declare-fun p11 () Bool)
(declare-fun p8 () Bool)
(declare-fun p6 () Bool)
(assert (= x24 (ite (= x18 x23) (_ bv1 1) (_ bv0 1))))
(assert (= (select x23 (_ bv23 5)) ((_ extract 767 736) x22)))
(assert (= (select x23 (_ bv22 5)) ((_ extract 735 704) x22)))
(assert (= (select x23 (_ bv21 5)) ((_ extract 703 672) x22)))
(assert (= (select x23 (_ bv20 5)) ((_ extract 671 640) x22)))
(assert (= (select x23 (_ bv19 5)) ((_ extract 639 608) x22)))
(assert (= (select x23 (_ bv18 5)) ((_ extract 607 576) x22)))
(assert (= (select x23 (_ bv17 5)) ((_ extract 575 544) x22)))
(assert (= (select x23 (_ bv16 5)) ((_ extract 543 512) x22)))
(assert (= (select x23 (_ bv15 5)) ((_ extract 511 480) x22)))
(assert (= (select x23 (_ bv14 5)) ((_ extract 479 448) x22)))
(assert (= (select x23 (_ bv13 5)) ((_ extract 447 416) x22)))
(assert (= (select x23 (_ bv12 5)) ((_ extract 415 384) x22)))
(assert (= (select x23 (_ bv11 5)) ((_ extract 383 352) x22)))
(assert (= (select x23 (_ bv10 5)) ((_ extract 351 320) x22)))
(assert (= (select x23 (_ bv9 5)) ((_ extract 319 288) x22)))
(assert (= (select x23 (_ bv8 5)) ((_ extract 287 256) x22)))
(assert (= (select x23 (_ bv7 5)) ((_ extract 255 224) x22)))
(assert (= (select x23 (_ bv6 5)) ((_ extract 223 192) x22)))
(assert (= (select x23 (_ bv5 5)) ((_ extract 191 160) x22)))
(assert (= (select x23 (_ bv4 5)) ((_ extract 159 128) x22)))
(assert (= (select x23 (_ bv3 5)) ((_ extract 127 96) x22)))
(assert (= (select x23 (_ bv2 5)) ((_ extract 95 64) x22)))
(assert (= (select x23 (_ bv1 5)) ((_ extract 63 32) x22)))
(assert (= (select x23 (_ bv0 5)) ((_ extract 31 0) x22)))
(assert (= (select x23 (_ bv31 5)) (_ bv0 32)))
(assert (= (select x23 (_ bv30 5)) (_ bv0 32)))
(assert (= (select x23 (_ bv29 5)) (_ bv0 32)))
(assert (= (select x23 (_ bv28 5)) (_ bv0 32)))
(assert (= (select x23 (_ bv27 5)) (_ bv0 32)))
(assert (= (select x23 (_ bv26 5)) (_ bv0 32)))
(assert (= (select x23 (_ bv25 5)) (_ bv0 32)))
(assert (= (select x23 (_ bv24 5)) (_ bv0 32)))
(assert (= x22 ((_ extract 767 0) x21)))
(assert (= x21 (x20 x19 x1 x0)))
(assert (= x19 (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (select x2 (_ bv23 5)) (select x2 (_ bv22 5))) (select x2 (_ bv21 5))) (select x2 (_ bv20 5))) (select x2 (_ bv19 5))) (select x2 (_ bv18 5))) (select x2 (_ bv17 5))) (select x2 (_ bv16 5))) (select x2 (_ bv15 5))) (select x2 (_ bv14 5))) (select x2 (_ bv13 5))) (select x2 (_ bv12 5))) (select x2 (_ bv11 5))) (select x2 (_ bv10 5))) (select x2 (_ bv9 5))) (select x2 (_ bv8 5))) (select x2 (_ bv7 5))) (select x2 (_ bv6 5))) (select x2 (_ bv5 5))) (select x2 (_ bv4 5))) (select x2 (_ bv3 5))) (select x2 (_ bv2 5))) (select x2 (_ bv1 5))) (select x2 (_ bv0 5)))))
(assert (= x18 (store x2 ((_ extract 4 0) x1) x17)))
(assert (= (select x18 (_ bv31 5)) (_ bv0 32)))
(assert (= (select x18 (_ bv30 5)) (_ bv0 32)))
(assert (= (select x18 (_ bv29 5)) (_ bv0 32)))
(assert (= (select x18 (_ bv28 5)) (_ bv0 32)))
(assert (= (select x18 (_ bv27 5)) (_ bv0 32)))
(assert (= (select x18 (_ bv26 5)) (_ bv0 32)))
(assert (= (select x18 (_ bv25 5)) (_ bv0 32)))
(assert (= (select x18 (_ bv24 5)) (_ bv0 32)))
(assert (= x17 ((_ extract 31 0) x16)))
(assert (= x16 (bvadd x0 x15)))
(assert (= x15 (bvshl x14 ((_ zero_extend 58) (_ bv1 6)))))
(assert (= x14 (bvand x13 (_ bv4294967295 64))))
(assert (= x13 ((_ sign_extend 32) x12)))
(assert (= x12 (select x2 ((_ extract 4 0) x1))))
(assert (= p11 (and p8 (bvsle x1 (_ bv23 32)))))
(assert (= x10 (bvand x7 x9)))
(assert (= x9 (ite (bvsle x1 (_ bv23 32)) (_ bv1 1) (_ bv0 1))))
(assert (= p8 (and (bvsle (_ bv0 32) x1) p6)))
(assert (= x7 (bvand x3 x5)))
(assert (= p6 (not (bvsle (_ bv24 32) x1))))
(assert (= x5 (bvnot x4)))
(assert (= x4 (ite (bvsle (_ bv24 32) x1) (_ bv1 1) (_ bv0 1))))
(assert (= x3 (ite (bvsle (_ bv0 32) x1) (_ bv1 1) (_ bv0 1))))
(assert true)
(assert (= (select x2 (_ bv31 5)) (_ bv0 32)))
(assert (= (select x2 (_ bv30 5)) (_ bv0 32)))
(assert (= (select x2 (_ bv29 5)) (_ bv0 32)))
(assert (= (select x2 (_ bv28 5)) (_ bv0 32)))
(assert (= (select x2 (_ bv27 5)) (_ bv0 32)))
(assert (= (select x2 (_ bv26 5)) (_ bv0 32)))
(assert (= (select x2 (_ bv25 5)) (_ bv0 32)))
(assert (= (select x2 (_ bv24 5)) (_ bv0 32)))
(assert (not (=> p11 (= x18 x23))))
(check-sat)
(exit)
