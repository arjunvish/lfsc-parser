(set-info :smt-lib-version 2.6)
(set-logic QF_AUFBV)
(set-info :source |These benchmarks are derived from a semi-automated proof of functional equivalence between two implementations of an Elliptic Curve Digital Signature Algorithm (ECDSA). More information about problem they encode can be found here: http://cps-vo.org/node/3405|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x34 () (_ BitVec 1))
(declare-fun x33 () (_ BitVec 64))
(declare-fun x32 () (_ BitVec 832))
(declare-fun x31 ((_ BitVec 768) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64)) (_ BitVec 832))
(declare-fun x30 () (_ BitVec 768))
(declare-fun x29 () (_ BitVec 64))
(declare-fun x28 () (_ BitVec 64))
(declare-fun x27 () (_ BitVec 6))
(declare-fun x26 () (_ BitVec 64))
(declare-fun x25 () (_ BitVec 64))
(declare-fun x24 () (_ BitVec 6))
(declare-fun x23 () (_ BitVec 64))
(declare-fun x22 () (_ BitVec 64))
(declare-fun x21 () (_ BitVec 64))
(declare-fun x20 () (_ BitVec 64))
(declare-fun x19 () (_ BitVec 64))
(declare-fun x18 () (_ BitVec 32))
(declare-fun x17 () (_ BitVec 64))
(declare-fun x16 () (_ BitVec 64))
(declare-fun x15 () (_ BitVec 64))
(declare-fun x14 () (_ BitVec 64))
(declare-fun x13 () (_ BitVec 64))
(declare-fun x11 () (_ BitVec 1))
(declare-fun x10 () (_ BitVec 1))
(declare-fun x8 () (_ BitVec 1))
(declare-fun x6 () (_ BitVec 1))
(declare-fun x5 () (_ BitVec 1))
(declare-fun x4 () (_ BitVec 1))
(declare-fun x3 () (Array (_ BitVec 5) (_ BitVec 32)))
(declare-fun x2 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun x0 () (_ BitVec 64))
(declare-fun p12 () Bool)
(declare-fun p9 () Bool)
(declare-fun p7 () Bool)
(assert (= x34 (ite (= x29 x33) (_ bv1 1) (_ bv0 1))))
(assert (= x33 ((_ extract 831 768) x32)))
(assert (= x32 (x31 x30 x2 x1 x0)))
(assert (= x30 (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (select x3 (_ bv23 5)) (select x3 (_ bv22 5))) (select x3 (_ bv21 5))) (select x3 (_ bv20 5))) (select x3 (_ bv19 5))) (select x3 (_ bv18 5))) (select x3 (_ bv17 5))) (select x3 (_ bv16 5))) (select x3 (_ bv15 5))) (select x3 (_ bv14 5))) (select x3 (_ bv13 5))) (select x3 (_ bv12 5))) (select x3 (_ bv11 5))) (select x3 (_ bv10 5))) (select x3 (_ bv9 5))) (select x3 (_ bv8 5))) (select x3 (_ bv7 5))) (select x3 (_ bv6 5))) (select x3 (_ bv5 5))) (select x3 (_ bv4 5))) (select x3 (_ bv3 5))) (select x3 (_ bv2 5))) (select x3 (_ bv1 5))) (select x3 (_ bv0 5)))))
(assert (= x29 (bvadd x25 x28)))
(assert (= x28 (bvlshr x26 ((_ zero_extend 58) x27))))
(assert (= x27 (bvneg (_ bv32 6))))
(assert (= x26 (bvmul x14 x15)))
(assert (= x25 (bvlshr x23 ((_ zero_extend 58) x24))))
(assert (= x24 (bvneg (_ bv32 6))))
(assert (= x23 (bvadd x0 x22)))
(assert (= x22 (bvadd x17 x21)))
(assert (= x21 (bvshl x20 ((_ zero_extend 58) (_ bv1 6)))))
(assert (= x20 (bvand x19 (_ bv4294967295 64))))
(assert (= x19 ((_ sign_extend 32) x18)))
(assert (= x18 (select x3 ((_ extract 4 0) x2))))
(assert (= x17 (bvand x16 (_ bv4294967295 64))))
(assert (= x16 (bvmul x14 x15)))
(assert (= x15 (bvand x13 (_ bv4294967295 64))))
(assert (= x14 (bvand x13 (_ bv4294967295 64))))
(assert (= x13 ((_ sign_extend 32) x1)))
(assert (= p12 (and p9 (bvsle x2 (_ bv23 32)))))
(assert (= x11 (bvand x8 x10)))
(assert (= x10 (ite (bvsle x2 (_ bv23 32)) (_ bv1 1) (_ bv0 1))))
(assert (= p9 (and (bvsle (_ bv0 32) x2) p7)))
(assert (= x8 (bvand x4 x6)))
(assert (= p7 (not (bvsle (_ bv24 32) x2))))
(assert (= x6 (bvnot x5)))
(assert (= x5 (ite (bvsle (_ bv24 32) x2) (_ bv1 1) (_ bv0 1))))
(assert (= x4 (ite (bvsle (_ bv0 32) x2) (_ bv1 1) (_ bv0 1))))
(assert true)
(assert (= (select x3 (_ bv31 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv30 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv29 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv28 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv27 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv26 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv25 5)) (_ bv0 32)))
(assert (= (select x3 (_ bv24 5)) (_ bv0 32)))
(assert (not (=> p12 (= x29 x33))))
(check-sat)
(exit)
