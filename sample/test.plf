(check
;; Declarations
(% p (term Bool)
(% A1 (th_holds true)
(% A4 (th_holds (= (BitVec 4) (a_var_bv 4 v3) (sign_extend 4  2 _  (extract 2  1 0 4 (a_bv 4 (bvc b1 (bvc b1 (bvc b1 (bvc b1  bvn)))))))))
(% A2 (th_holds (= (BitVec 4) (a_var_bv 4 v0) (a_var_bv 4 v1)))
(% A5 (th_holds (= (BitVec 4) (a_var_bv 4 v2) (a_var_bv 4 v3)))
(% A1 (th_holds (= (BitVec 4) (a_var_bv 4 v1) (repeat 4  4 _  (bvcomp 2 (extract 2  1 0 4 (a_bv 4 (bvc b0 (bvc b0 (bvc b1 (bvc b1  bvn)))))) (extract 2  3 2 4 (a_bv 4 (bvc b0 (bvc b0 (bvc b1 (bvc b1  bvn))))))))))
(% A0 (th_holds (= (BitVec 4) (a_var_bv 4 v0) (rotate_right 4  (rotate_left 4  (a_bv 4 (bvc b0 (bvc b0 (bvc b0 (bvc b1  bvn)))))))))
(% A3 (th_holds (= (BitVec 4) (a_var_bv 4 v2) (zero_extend 4  2 _  (extract 2  1 0 4 (a_bv 4 (bvc b0 (bvc b0 (bvc b1 (bvc b1  bvn)))))))))

(: (holds cln)

;; Printing deferred declarations 


;; Printing the global let map ;; Printing aliasing declarations 


;; Rewrites for Lemmas 

;; In the preprocessor we trust 
(th_let_pf _ (trust_f (and (p_app p) (not (p_app p)))) (\ .PA240

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom (p_app p) (\ .v2 (\ .a2
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (and_elim_1 _ _ .PA240) .l4)))) (\ .pb4
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 (and_elim_2 _ _ .PA240))))) (\ .pb5
;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


;; Bit-blasting learned clauses 

;; Printing final unsat proof 
(satlem_simplify _ _ _ (Q _ _ .pb5 .pb4 .v2) (\ empty empty)))))))))))))))))))))
;;

